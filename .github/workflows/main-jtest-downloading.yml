# -------------------------------------------------
# This workflow runs Parasoft Jtest analysis with selected build tool
# -------------------------------------------------
# Prerequisites:
# 1. Set up the Jtest license and other settings in jtestcli.properties in the Jtest installation directory
name: Parasoft Jtest - downloading

# Define when the action will run. 
on:
  
  # Triggers the workflow on push or pull request events
  # push:
  #   branches: [ main ]

  # Allows to run workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    working-directory: ..\

jobs:
  jtest:
    name: Jtest job execution
    # The type of runner that the job will run on
    runs-on: self-hosted
    env:
      release_url: http://xtest.parasoft.com.pl/builds/jtest/2020/release-2020.2.0/
      app_file: parasoft_jtest_2020.2.0_win32_x86_64.zip
    
    steps:
#http://xtest.parasoft.com.pl/builds/xtest/2020/release-2020.2.0/parasoft_uta_2020.2.0_intellij.zip
#http://xtest.parasoft.com.pl/builds/jtest/2020/release-2020.2.0/parasoft_jtest_2020.2.0_win32_x86_64.zip
      - name: Download Jtest
        run: wget -OutFile $env:app_file $env:release_url$env:app_file
      - name: Unpack app file
        run: unzip -o $env:app_file
      - name: List working directory
        run: Get-ChildItem
        
      - name: Checkout repository
        uses: actions/checkout@v2

      # TODO: describe how configure tool to produce SARIF
      - name: Run static analysis
        # -------------------------------------------------
        # Prerequisites:
        # 1. Configure working directory if it is different than repository root
        working-directory: demo-project
        # 2. Enable one of the "Running" steps below
          
        # -------------------------------------------------
        # Running with Maven
        # Prerequisites:
        # 1. Configure your Maven setup by following the Jtest User Guide:
        # https://docs.parasoft.com/display/JTEST20202/Configuring+the+Jtest+Plugin+for+Maven
        # 2. Uncomment the following to run the "Recommended Rules" test configuration:
        run: mvn jtest:jtest "-Djtest.home=..\..\jtest"
        # or uncomment the following to run the specified test configuration:
        # run: mvn clean jtest:jtest "-Djtest.config=builtin://Recommended Rules"
        
        # -------------------------------------------------
        # Running with Gradle
        # Prerequisites:
        # 1. Configure the installed Jtest package or add the desired settings to the "jtest" block of your buildscript.
        # 2. Uncomment the following to run the "Recommended Rules" test configuration:
        # run: gradle clean assemble jtest
        # or uncomment the following to run the specified test configuration:
        # run: gradle clean assemble jtest "-Djtest.config=builtin://Recommended Rules"

        # -------------------------------------------------
        # Running with Ant, running with Jtest data file - follow jtest examples README files and run a command
        # run: 
          
      # -------------------------------------------------
      # Archive the findings reports as job artifact
      - name: Upload report artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Report files
          path: demo-project/target/jtest/report.*
          # path: demo-project/build/reports/jtest/report.*
      
      # -------------------------------------------------
      # Upload the findings into the GitHub code scanning alert section
      # - uses: github/codeql-action/upload-sarif@v1
      #  with:
      #    sarif_file: demo-project/target/jtest/report.sarif 
      #- TODO: PRODUCE JSON with SARIF FORMAT
