# This is a basic workflow to help you get started with the Run Jtest action.
name: Jtest Pull Request

on:
  # Trigger the workflow on push or pull request events but only for the master branch.
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
  
jobs:
  build:
    name: Analyze project with Jtest
    
    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    # Runs code analysis with Jtest
    
    - name: Create input for Jtest
      #working-directory: demo-project
      run: mvnw clean install jtest:jtest "-Djtest.skip=true" 
      #uses: parasoft/run-jtest-action@0.0.2
      #with:
        #Uses the jtest.data.json generated with the Maven command in the previous step
       # input: demo-project/jtest.data.json
       
     - name: Run Jtest
      id: jtest
      uses: parasoft/run-jtest-action@1.0.0
      with:
        #Uses the jtest.data.json generated with the Gradle command in the previous step
        input: build/jtest/jtest.data.json
        
        # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: demo-project/target/jtest/report.sarif # reports is a default location for reports directory

    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
          name: Static analysis reports
          path: demo-project/target/jtest/*.*
